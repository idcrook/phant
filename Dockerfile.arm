# ---- A base image ----
FROM arm32v7/node:8 AS base
# https://hub.docker.com/_/node/
# https://hub.docker.com/r/arm32v7/node/

MAINTAINER idcrook@users.noreply.github.com

# Create app directory
WORKDIR /app

# ---- Dependencies ----
FROM base AS dependencies
# Install app dependencies
COPY package*.json ./
# Install app dependencies (including devDependencies)
RUN npm install
# requires git binary to install github repo dependencies


# ---- Copy app files ----
FROM dependencies AS build

WORKDIR /app

# Copy app files
COPY .bin/    .bin/
COPY lib/     ./lib/

# Main app file
COPY index.js ./


# ---- Release ----
FROM arm32v7/node:8-slim
# Uses -slim to create a smaller production container
#  - :alpine builds are not currently available in arm32v7/node
#  - for a shell to debug inside container, drop the "-slim" tag portion

# Create app directory
WORKDIR /app

COPY --from=dependencies /app/package.json ./
COPY --from=build /app ./

# EXPOSE 8888
# EXPOSE 8889
#    http_port = process.env.PHANT_PORT || 8080,
#    telnet_port = process.env.PHANT_TELNET_PORT || 8081;
# VOLUME /phant_streams
# ENTRYPOINT ["phant"]
# CMD ["/usr/local/bin/phant"]
CMD ["npm", "start"]

# NOTE: Container expects a runtime directory to be visible ->
# process.env.PHANT_STORAGEDIR || 'phant_streams'

# ---- Docker build/test/release steps ----
# docker build -t phant-arm32v7 -f Dockerfile.arm .
# TESTING:
# mkdir ./phant_streams
# docker run -p 8888:8888 -p 8889:8889 -e PHANT_PORT='8888' -e PHANT_TELNET_PORT='8889' -v `pwd`/phant_streams/:/app/phant_streams/ phant-arm32v7:latest
#     > phant@6.8.0 start /app
#     > .bin/serve
#     phant http server running on port 8888
#     phant telnet server running on port 8889
# docker stop <CONTAINER_ID>

# docker tag phant-arm32v7 dpcrook/phant_server-docker:0.1.2-arm32v7
# docker push dpcrook/phant_server-docker:0.1.2-arm32v7
